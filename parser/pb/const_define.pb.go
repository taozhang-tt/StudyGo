// Code generated by protoc-gen-go. DO NOT EDIT.
// source: const_define.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 玩家状态
type GamerStatus int32

const (
	GamerStatus_Offline  GamerStatus = 0
	GamerStatus_Online   GamerStatus = 1
	GamerStatus_Teaming  GamerStatus = 2
	GamerStatus_Matching GamerStatus = 3
	GamerStatus_Fighting GamerStatus = 4
)

var GamerStatus_name = map[int32]string{
	0: "Offline",
	1: "Online",
	2: "Teaming",
	3: "Matching",
	4: "Fighting",
}
var GamerStatus_value = map[string]int32{
	"Offline":  0,
	"Online":   1,
	"Teaming":  2,
	"Matching": 3,
	"Fighting": 4,
}

func (x GamerStatus) String() string {
	return proto.EnumName(GamerStatus_name, int32(x))
}
func (GamerStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{0}
}

type ChatChannel int32

const (
	ChatChannel_GamerChat ChatChannel = 0
	ChatChannel_WorldChat ChatChannel = 1
)

var ChatChannel_name = map[int32]string{
	0: "GamerChat",
	1: "WorldChat",
}
var ChatChannel_value = map[string]int32{
	"GamerChat": 0,
	"WorldChat": 1,
}

func (x ChatChannel) String() string {
	return proto.EnumName(ChatChannel_name, int32(x))
}
func (ChatChannel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{1}
}

// 邮件类型
type MailType int32

const (
	MailType_ActivityMail     MailType = 0
	MailType_SysMail          MailType = 1
	MailType_AnnouncementMail MailType = 2
	MailType_GamerMail        MailType = 3
)

var MailType_name = map[int32]string{
	0: "ActivityMail",
	1: "SysMail",
	2: "AnnouncementMail",
	3: "GamerMail",
}
var MailType_value = map[string]int32{
	"ActivityMail":     0,
	"SysMail":          1,
	"AnnouncementMail": 2,
	"GamerMail":        3,
}

func (x MailType) String() string {
	return proto.EnumName(MailType_name, int32(x))
}
func (MailType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{2}
}

// 邮件附件状态
type MailState int32

const (
	MailState_MailUnRead   MailState = 0
	MailState_MailRead     MailState = 1
	MailState_MailReceived MailState = 2
)

var MailState_name = map[int32]string{
	0: "MailUnRead",
	1: "MailRead",
	2: "MailReceived",
}
var MailState_value = map[string]int32{
	"MailUnRead":   0,
	"MailRead":     1,
	"MailReceived": 2,
}

func (x MailState) String() string {
	return proto.EnumName(MailState_name, int32(x))
}
func (MailState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{3}
}

// 游戏模式
type PVPType int32

const (
	PVPType_MINVALID PVPType = 0
	PVPType_PVE_M1   PVPType = 1
	PVPType_PVE_M2   PVPType = 2
	PVPType_PVE_M3   PVPType = 3
	PVPType_PVP_M1V1 PVPType = 100
	PVPType_PVP_M2V2 PVPType = 101
	PVPType_PVP_M3V3 PVPType = 102
	PVPType_PVP_M4V4 PVPType = 103
	PVPType_PVP_M5V5 PVPType = 104
)

var PVPType_name = map[int32]string{
	0:   "MINVALID",
	1:   "PVE_M1",
	2:   "PVE_M2",
	3:   "PVE_M3",
	100: "PVP_M1V1",
	101: "PVP_M2V2",
	102: "PVP_M3V3",
	103: "PVP_M4V4",
	104: "PVP_M5V5",
}
var PVPType_value = map[string]int32{
	"MINVALID": 0,
	"PVE_M1":   1,
	"PVE_M2":   2,
	"PVE_M3":   3,
	"PVP_M1V1": 100,
	"PVP_M2V2": 101,
	"PVP_M3V3": 102,
	"PVP_M4V4": 103,
	"PVP_M5V5": 104,
}

func (x PVPType) String() string {
	return proto.EnumName(PVPType_name, int32(x))
}
func (PVPType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{4}
}

// 道具类型
type ItemType int32

const (
	ItemType_invalid           ItemType = 0
	ItemType_diamond           ItemType = 1
	ItemType_gold              ItemType = 2
	ItemType_dollar            ItemType = 3
	ItemType_product           ItemType = 4
	ItemType_Item              ItemType = 5
	ItemType_property          ItemType = 6
	ItemType_artistContract    ItemType = 7
	ItemType_gift              ItemType = 8
	ItemType_buildingMaterial  ItemType = 9
	ItemType_execution         ItemType = 10
	ItemType_exp               ItemType = 11
	ItemType_like              ItemType = 12
	ItemType_expect            ItemType = 13
	ItemType_cup               ItemType = 14
	ItemType_artistPhysical    ItemType = 15
	ItemType_artistChip        ItemType = 16
	ItemType_multipleChoiceOne ItemType = 17
	ItemType_script            ItemType = 18
	ItemType_completeType      ItemType = 19
	ItemType_information       ItemType = 20
	ItemType_story             ItemType = 21
	ItemType_actorType         ItemType = 22
	ItemType_envelope          ItemType = 30
)

var ItemType_name = map[int32]string{
	0:  "invalid",
	1:  "diamond",
	2:  "gold",
	3:  "dollar",
	4:  "product",
	5:  "Item",
	6:  "property",
	7:  "artistContract",
	8:  "gift",
	9:  "buildingMaterial",
	10: "execution",
	11: "exp",
	12: "like",
	13: "expect",
	14: "cup",
	15: "artistPhysical",
	16: "artistChip",
	17: "multipleChoiceOne",
	18: "script",
	19: "completeType",
	20: "information",
	21: "story",
	22: "actorType",
	30: "envelope",
}
var ItemType_value = map[string]int32{
	"invalid":           0,
	"diamond":           1,
	"gold":              2,
	"dollar":            3,
	"product":           4,
	"Item":              5,
	"property":          6,
	"artistContract":    7,
	"gift":              8,
	"buildingMaterial":  9,
	"execution":         10,
	"exp":               11,
	"like":              12,
	"expect":            13,
	"cup":               14,
	"artistPhysical":    15,
	"artistChip":        16,
	"multipleChoiceOne": 17,
	"script":            18,
	"completeType":      19,
	"information":       20,
	"story":             21,
	"actorType":         22,
	"envelope":          30,
}

func (x ItemType) String() string {
	return proto.EnumName(ItemType_name, int32(x))
}
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{5}
}

// 任务状态
type TaskState int32

const (
	TaskState_CannotAccept TaskState = 0
	TaskState_CanAccept    TaskState = 1
	TaskState_Doing        TaskState = 2
	TaskState_Complete     TaskState = 3
	TaskState_TaskFinish   TaskState = 4
)

var TaskState_name = map[int32]string{
	0: "CannotAccept",
	1: "CanAccept",
	2: "Doing",
	3: "Complete",
	4: "TaskFinish",
}
var TaskState_value = map[string]int32{
	"CannotAccept": 0,
	"CanAccept":    1,
	"Doing":        2,
	"Complete":     3,
	"TaskFinish":   4,
}

func (x TaskState) String() string {
	return proto.EnumName(TaskState_name, int32(x))
}
func (TaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{6}
}

// 抽奖类型
type GashaponType int32

const (
	GashaponType_GashaponTypeInvalid  GashaponType = 0
	GashaponType_IntelligenceGashapon GashaponType = 1
	GashaponType_ItemGashapon         GashaponType = 2
	GashaponType_StoryGashapon        GashaponType = 3
)

var GashaponType_name = map[int32]string{
	0: "GashaponTypeInvalid",
	1: "IntelligenceGashapon",
	2: "ItemGashapon",
	3: "StoryGashapon",
}
var GashaponType_value = map[string]int32{
	"GashaponTypeInvalid":  0,
	"IntelligenceGashapon": 1,
	"ItemGashapon":         2,
	"StoryGashapon":        3,
}

func (x GashaponType) String() string {
	return proto.EnumName(GashaponType_name, int32(x))
}
func (GashaponType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{7}
}

type RoomState int32

const (
	RoomState_RoomState_None RoomState = 0
	RoomState_Normal         RoomState = 1
	RoomState_InMatching     RoomState = 2
)

var RoomState_name = map[int32]string{
	0: "RoomState_None",
	1: "Normal",
	2: "InMatching",
}
var RoomState_value = map[string]int32{
	"RoomState_None": 0,
	"Normal":         1,
	"InMatching":     2,
}

func (x RoomState) String() string {
	return proto.EnumName(RoomState_name, int32(x))
}
func (RoomState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{8}
}

type RoomGamerState int32

const (
	RoomGamerState_RoomGamerState_None RoomGamerState = 0
	RoomGamerState_InNormal            RoomGamerState = 1
	RoomGamerState_InReady             RoomGamerState = 2
)

var RoomGamerState_name = map[int32]string{
	0: "RoomGamerState_None",
	1: "InNormal",
	2: "InReady",
}
var RoomGamerState_value = map[string]int32{
	"RoomGamerState_None": 0,
	"InNormal":            1,
	"InReady":             2,
}

func (x RoomGamerState) String() string {
	return proto.EnumName(RoomGamerState_name, int32(x))
}
func (RoomGamerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_const_define_d243c4656820875a, []int{9}
}

func init() {
	proto.RegisterEnum("GamerStatus", GamerStatus_name, GamerStatus_value)
	proto.RegisterEnum("ChatChannel", ChatChannel_name, ChatChannel_value)
	proto.RegisterEnum("MailType", MailType_name, MailType_value)
	proto.RegisterEnum("MailState", MailState_name, MailState_value)
	proto.RegisterEnum("PVPType", PVPType_name, PVPType_value)
	proto.RegisterEnum("ItemType", ItemType_name, ItemType_value)
	proto.RegisterEnum("TaskState", TaskState_name, TaskState_value)
	proto.RegisterEnum("GashaponType", GashaponType_name, GashaponType_value)
	proto.RegisterEnum("RoomState", RoomState_name, RoomState_value)
	proto.RegisterEnum("RoomGamerState", RoomGamerState_name, RoomGamerState_value)
}

func init() { proto.RegisterFile("const_define.proto", fileDescriptor_const_define_d243c4656820875a) }

var fileDescriptor_const_define_d243c4656820875a = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x94, 0xcd, 0x6e, 0xe3, 0x36,
	0x10, 0xc7, 0x6d, 0xd9, 0x1b, 0xdb, 0x63, 0xc7, 0x3b, 0xe1, 0x66, 0xdb, 0x9e, 0xfa, 0x00, 0x2a,
	0x50, 0x20, 0xf1, 0xee, 0xa9, 0x27, 0xc3, 0x69, 0x02, 0x01, 0xf5, 0x07, 0xf2, 0xa1, 0x1e, 0x0d,
	0x86, 0x1a, 0x5b, 0x44, 0x28, 0x52, 0x90, 0x68, 0x23, 0x3e, 0xf6, 0x3d, 0xfb, 0x30, 0xc5, 0x50,
	0x8e, 0xda, 0xde, 0xf8, 0x1b, 0x8d, 0xff, 0xfc, 0x73, 0x3e, 0x0c, 0x42, 0x39, 0x5b, 0xfb, 0x6d,
	0x46, 0x3b, 0x6d, 0xe9, 0xd7, 0xb2, 0x72, 0xde, 0xc5, 0x6b, 0x18, 0x3f, 0xc8, 0x82, 0xaa, 0x27,
	0x2f, 0xfd, 0xa1, 0x16, 0x63, 0x18, 0xac, 0x77, 0x3b, 0xa3, 0x2d, 0x61, 0x47, 0x00, 0x5c, 0xac,
	0x6d, 0x38, 0x77, 0xf9, 0xc3, 0x33, 0xc9, 0x42, 0xdb, 0x3d, 0x46, 0x62, 0x02, 0xc3, 0xa5, 0xf4,
	0x2a, 0x67, 0xea, 0x31, 0xdd, 0xeb, 0x7d, 0xee, 0x99, 0xfa, 0xf1, 0x2f, 0x30, 0x5e, 0xe4, 0xd2,
	0x2f, 0x72, 0x69, 0x2d, 0x19, 0x71, 0x09, 0xa3, 0xa0, 0xcf, 0x31, 0xec, 0x30, 0xfe, 0xe9, 0x2a,
	0x93, 0x05, 0xec, 0xc6, 0x2b, 0x16, 0xd2, 0xe6, 0xf9, 0x54, 0x92, 0x40, 0x98, 0xcc, 0x95, 0xd7,
	0x47, 0xed, 0x4f, 0x1c, 0xc3, 0x0e, 0xdf, 0xf9, 0x74, 0xaa, 0x03, 0x74, 0xc5, 0x35, 0xe0, 0xdc,
	0x5a, 0x77, 0xb0, 0x8a, 0x0a, 0xb2, 0x3e, 0x44, 0xa3, 0x56, 0x3e, 0x60, 0x2f, 0xfe, 0x0d, 0x46,
	0x7c, 0xe2, 0xc7, 0x90, 0x98, 0x02, 0x30, 0xbc, 0xd8, 0x47, 0x92, 0x19, 0x76, 0x1a, 0xd7, 0xda,
	0x04, 0xea, 0xf2, 0x75, 0x0d, 0x29, 0xd2, 0x47, 0xca, 0x30, 0x8a, 0xff, 0xea, 0xc2, 0x60, 0x93,
	0x6e, 0x82, 0x19, 0xce, 0x4d, 0x56, 0xe9, 0xfc, 0x8f, 0xe4, 0xae, 0x29, 0xc4, 0x26, 0xfd, 0x7d,
	0xbb, 0xbc, 0xc1, 0x6e, 0x7b, 0xbe, 0xc5, 0xa8, 0x3d, 0xcf, 0x9a, 0x2a, 0x6c, 0xd2, 0xcd, 0x76,
	0x79, 0x93, 0xde, 0x60, 0xd6, 0xd2, 0x6d, 0x7a, 0x8b, 0xd4, 0xd2, 0x2c, 0x9d, 0xe1, 0xae, 0xa5,
	0x6f, 0xe9, 0x37, 0xdc, 0xb7, 0xf4, 0x3d, 0xfd, 0x8e, 0x79, 0xfc, 0x77, 0x04, 0xc3, 0xc4, 0x53,
	0x11, 0x4c, 0x8c, 0x61, 0xa0, 0xed, 0x51, 0x1a, 0x9d, 0x35, 0xc5, 0xc8, 0xb4, 0x2c, 0x9c, 0x65,
	0xf3, 0x43, 0xe8, 0xef, 0x9d, 0xc9, 0x1a, 0x0b, 0x99, 0x33, 0x46, 0x56, 0xd8, 0xe3, 0x94, 0xb2,
	0x72, 0xd9, 0x41, 0x79, 0xec, 0x73, 0x0a, 0x0b, 0xe1, 0x27, 0xbe, 0xa1, 0xac, 0x5c, 0x49, 0x95,
	0x3f, 0xe1, 0x85, 0x10, 0x30, 0x95, 0x95, 0xd7, 0xb5, 0x5f, 0x38, 0xeb, 0x2b, 0xa9, 0x3c, 0x0e,
	0x82, 0x9c, 0xde, 0x79, 0x1c, 0x72, 0x95, 0x5f, 0x0f, 0xda, 0x64, 0xda, 0xee, 0x97, 0xd2, 0x53,
	0xa5, 0xa5, 0xc1, 0x11, 0x57, 0x99, 0xde, 0x49, 0x1d, 0xbc, 0x76, 0x16, 0x41, 0x0c, 0xa0, 0x47,
	0xef, 0x25, 0x8e, 0xf9, 0x77, 0x46, 0xbf, 0x11, 0x4e, 0xd8, 0x06, 0xbd, 0x97, 0xa4, 0x3c, 0x5e,
	0xf2, 0x67, 0x75, 0x28, 0x71, 0xfa, 0xef, 0x55, 0x9b, 0xfc, 0x54, 0x6b, 0x25, 0x0d, 0x7e, 0xe6,
	0xa6, 0x9c, 0xaf, 0xcf, 0x75, 0x89, 0x28, 0xbe, 0xc2, 0x55, 0x71, 0x30, 0x5e, 0x97, 0x86, 0x16,
	0xb9, 0xd3, 0x8a, 0xd6, 0x96, 0xf0, 0x8a, 0xf5, 0x6a, 0x55, 0xe9, 0xd2, 0xa3, 0xe0, 0x4e, 0x29,
	0x57, 0x94, 0x86, 0x3c, 0x71, 0x59, 0xf0, 0x8b, 0xf8, 0x0c, 0x63, 0x6d, 0x77, 0xae, 0x2a, 0x64,
	0x70, 0x74, 0x2d, 0x46, 0xf0, 0xa9, 0xf6, 0xae, 0x3a, 0xe1, 0x57, 0xf6, 0x2a, 0x95, 0x77, 0x55,
	0x48, 0xfd, 0x81, 0x1f, 0x4f, 0xf6, 0x48, 0xc6, 0x95, 0x84, 0x3f, 0xc7, 0x2f, 0x30, 0x7a, 0x96,
	0xf5, 0x5b, 0x33, 0x1f, 0x08, 0x93, 0x85, 0xb4, 0xd6, 0xf9, 0xb9, 0x52, 0x54, 0x9e, 0xa7, 0x73,
	0x21, 0xed, 0x19, 0xbb, 0xac, 0x7a, 0xe7, 0xda, 0x89, 0x5f, 0x9c, 0x3d, 0x60, 0x8f, 0x1f, 0xc1,
	0x32, 0xf7, 0xda, 0xea, 0x3a, 0xc7, 0x7e, 0xbc, 0x83, 0xc9, 0x83, 0xac, 0x73, 0x59, 0x3a, 0x1b,
	0x1a, 0xf7, 0x23, 0x7c, 0xf9, 0x2f, 0x27, 0x6d, 0x13, 0x7f, 0x82, 0xeb, 0xc4, 0x7a, 0x32, 0x46,
	0xef, 0xc9, 0x2a, 0xfa, 0x48, 0x6a, 0xc6, 0x91, 0xdb, 0xd5, 0x46, 0x22, 0x71, 0x05, 0x97, 0x4f,
	0xfc, 0xa6, 0x36, 0x14, 0xc6, 0xfb, 0xd1, 0xb9, 0xa2, 0xb1, 0x2f, 0x60, 0xda, 0xc2, 0x76, 0xe5,
	0x3e, 0x36, 0x76, 0xc5, 0x65, 0xe1, 0x85, 0x99, 0x02, 0x24, 0xb6, 0x5d, 0xd3, 0x28, 0xbe, 0x6b,
	0xf2, 0xdb, 0x6d, 0x0f, 0x36, 0xff, 0x1f, 0xf9, 0x90, 0x99, 0xc0, 0x30, 0xb1, 0xad, 0xd0, 0x18,
	0x06, 0x49, 0xd8, 0xa1, 0x13, 0x46, 0xaf, 0x17, 0xe1, 0x6f, 0x63, 0xf6, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbd, 0x6f, 0xb6, 0x80, 0x4c, 0x04, 0x00, 0x00,
}
